schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "coin_activities"
"""
type coin_activities {
  activity_type: String!
  amount: numeric!
  block_height: bigint!
  coin_type: String!
  entry_function_id_str: String
  event_account_address: String!
  event_creation_number: bigint!
  event_sequence_number: bigint!
  is_gas_fee: Boolean!
  is_transaction_success: Boolean!
  owner_address: String!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
}

"""
Boolean expression to filter rows from the table "coin_activities". All fields are combined with a logical 'AND'.
"""
input coin_activities_bool_exp {
  _and: [coin_activities_bool_exp!]
  _not: coin_activities_bool_exp
  _or: [coin_activities_bool_exp!]
  activity_type: String_comparison_exp
  amount: numeric_comparison_exp
  block_height: bigint_comparison_exp
  coin_type: String_comparison_exp
  entry_function_id_str: String_comparison_exp
  event_account_address: String_comparison_exp
  event_creation_number: bigint_comparison_exp
  event_sequence_number: bigint_comparison_exp
  is_gas_fee: Boolean_comparison_exp
  is_transaction_success: Boolean_comparison_exp
  owner_address: String_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
}

"""Ordering options when selecting data from "coin_activities"."""
input coin_activities_order_by {
  activity_type: order_by
  amount: order_by
  block_height: order_by
  coin_type: order_by
  entry_function_id_str: order_by
  event_account_address: order_by
  event_creation_number: order_by
  event_sequence_number: order_by
  is_gas_fee: order_by
  is_transaction_success: order_by
  owner_address: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
}

"""
select columns of table "coin_activities"
"""
enum coin_activities_select_column {
  """column name"""
  activity_type

  """column name"""
  amount

  """column name"""
  block_height

  """column name"""
  coin_type

  """column name"""
  entry_function_id_str

  """column name"""
  event_account_address

  """column name"""
  event_creation_number

  """column name"""
  event_sequence_number

  """column name"""
  is_gas_fee

  """column name"""
  is_transaction_success

  """column name"""
  owner_address

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version
}

"""
Streaming cursor of the table "coin_activities"
"""
input coin_activities_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: coin_activities_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input coin_activities_stream_cursor_value_input {
  activity_type: String
  amount: numeric
  block_height: bigint
  coin_type: String
  entry_function_id_str: String
  event_account_address: String
  event_creation_number: bigint
  event_sequence_number: bigint
  is_gas_fee: Boolean
  is_transaction_success: Boolean
  owner_address: String
  transaction_timestamp: timestamp
  transaction_version: bigint
}

"""
columns and relationships of "coin_balances"
"""
type coin_balances {
  amount: numeric!
  coin_type: String!
  coin_type_hash: String!
  owner_address: String!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
}

"""
Boolean expression to filter rows from the table "coin_balances". All fields are combined with a logical 'AND'.
"""
input coin_balances_bool_exp {
  _and: [coin_balances_bool_exp!]
  _not: coin_balances_bool_exp
  _or: [coin_balances_bool_exp!]
  amount: numeric_comparison_exp
  coin_type: String_comparison_exp
  coin_type_hash: String_comparison_exp
  owner_address: String_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
}

"""Ordering options when selecting data from "coin_balances"."""
input coin_balances_order_by {
  amount: order_by
  coin_type: order_by
  coin_type_hash: order_by
  owner_address: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
}

"""
select columns of table "coin_balances"
"""
enum coin_balances_select_column {
  """column name"""
  amount

  """column name"""
  coin_type

  """column name"""
  coin_type_hash

  """column name"""
  owner_address

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version
}

"""
Streaming cursor of the table "coin_balances"
"""
input coin_balances_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: coin_balances_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input coin_balances_stream_cursor_value_input {
  amount: numeric
  coin_type: String
  coin_type_hash: String
  owner_address: String
  transaction_timestamp: timestamp
  transaction_version: bigint
}

"""
columns and relationships of "coin_infos"
"""
type coin_infos {
  coin_type: String!
  coin_type_hash: String!
  creator_address: String!
  decimals: Int!
  name: String!
  symbol: String!
  transaction_created_timestamp: timestamp!
  transaction_version_created: bigint!
}

"""
Boolean expression to filter rows from the table "coin_infos". All fields are combined with a logical 'AND'.
"""
input coin_infos_bool_exp {
  _and: [coin_infos_bool_exp!]
  _not: coin_infos_bool_exp
  _or: [coin_infos_bool_exp!]
  coin_type: String_comparison_exp
  coin_type_hash: String_comparison_exp
  creator_address: String_comparison_exp
  decimals: Int_comparison_exp
  name: String_comparison_exp
  symbol: String_comparison_exp
  transaction_created_timestamp: timestamp_comparison_exp
  transaction_version_created: bigint_comparison_exp
}

"""Ordering options when selecting data from "coin_infos"."""
input coin_infos_order_by {
  coin_type: order_by
  coin_type_hash: order_by
  creator_address: order_by
  decimals: order_by
  name: order_by
  symbol: order_by
  transaction_created_timestamp: order_by
  transaction_version_created: order_by
}

"""
select columns of table "coin_infos"
"""
enum coin_infos_select_column {
  """column name"""
  coin_type

  """column name"""
  coin_type_hash

  """column name"""
  creator_address

  """column name"""
  decimals

  """column name"""
  name

  """column name"""
  symbol

  """column name"""
  transaction_created_timestamp

  """column name"""
  transaction_version_created
}

"""
Streaming cursor of the table "coin_infos"
"""
input coin_infos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: coin_infos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input coin_infos_stream_cursor_value_input {
  coin_type: String
  coin_type_hash: String
  creator_address: String
  decimals: Int
  name: String
  symbol: String
  transaction_created_timestamp: timestamp
  transaction_version_created: bigint
}

"""
columns and relationships of "coin_supply"
"""
type coin_supply {
  coin_type: String!
  coin_type_hash: String!
  supply: numeric!
  transaction_epoch: bigint!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
}

"""
Boolean expression to filter rows from the table "coin_supply". All fields are combined with a logical 'AND'.
"""
input coin_supply_bool_exp {
  _and: [coin_supply_bool_exp!]
  _not: coin_supply_bool_exp
  _or: [coin_supply_bool_exp!]
  coin_type: String_comparison_exp
  coin_type_hash: String_comparison_exp
  supply: numeric_comparison_exp
  transaction_epoch: bigint_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
}

"""Ordering options when selecting data from "coin_supply"."""
input coin_supply_order_by {
  coin_type: order_by
  coin_type_hash: order_by
  supply: order_by
  transaction_epoch: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
}

"""
select columns of table "coin_supply"
"""
enum coin_supply_select_column {
  """column name"""
  coin_type

  """column name"""
  coin_type_hash

  """column name"""
  supply

  """column name"""
  transaction_epoch

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version
}

"""
Streaming cursor of the table "coin_supply"
"""
input coin_supply_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: coin_supply_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input coin_supply_stream_cursor_value_input {
  coin_type: String
  coin_type_hash: String
  supply: numeric
  transaction_epoch: bigint
  transaction_timestamp: timestamp
  transaction_version: bigint
}

"""
columns and relationships of "collection_datas"
"""
type collection_datas {
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!
  description: String!
  description_mutable: Boolean!
  maximum: numeric!
  maximum_mutable: Boolean!
  metadata_uri: String!
  supply: numeric!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
  uri_mutable: Boolean!
}

"""
Boolean expression to filter rows from the table "collection_datas". All fields are combined with a logical 'AND'.
"""
input collection_datas_bool_exp {
  _and: [collection_datas_bool_exp!]
  _not: collection_datas_bool_exp
  _or: [collection_datas_bool_exp!]
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  description: String_comparison_exp
  description_mutable: Boolean_comparison_exp
  maximum: numeric_comparison_exp
  maximum_mutable: Boolean_comparison_exp
  metadata_uri: String_comparison_exp
  supply: numeric_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
  uri_mutable: Boolean_comparison_exp
}

"""Ordering options when selecting data from "collection_datas"."""
input collection_datas_order_by {
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  description: order_by
  description_mutable: order_by
  maximum: order_by
  maximum_mutable: order_by
  metadata_uri: order_by
  supply: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
  uri_mutable: order_by
}

"""
select columns of table "collection_datas"
"""
enum collection_datas_select_column {
  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  description

  """column name"""
  description_mutable

  """column name"""
  maximum

  """column name"""
  maximum_mutable

  """column name"""
  metadata_uri

  """column name"""
  supply

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version

  """column name"""
  uri_mutable
}

"""
Streaming cursor of the table "collection_datas"
"""
input collection_datas_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: collection_datas_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input collection_datas_stream_cursor_value_input {
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  description: String
  description_mutable: Boolean
  maximum: numeric
  maximum_mutable: Boolean
  metadata_uri: String
  supply: numeric
  transaction_timestamp: timestamp
  transaction_version: bigint
  uri_mutable: Boolean
}

"""
columns and relationships of "current_ans_lookup"
"""
type current_ans_lookup {
  """An array relationship"""
  all_token_ownerships(
    """distinct select on columns"""
    distinct_on: [current_token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_ownerships_order_by!]

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): [current_token_ownerships!]!

  """An aggregate relationship"""
  all_token_ownerships_aggregate(
    """distinct select on columns"""
    distinct_on: [current_token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_ownerships_order_by!]

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): current_token_ownerships_aggregate!
  domain: String!
  expiration_timestamp: timestamp!
  last_transaction_version: bigint!
  registered_address: String
  subdomain: String!
}

"""
Boolean expression to filter rows from the table "current_ans_lookup". All fields are combined with a logical 'AND'.
"""
input current_ans_lookup_bool_exp {
  _and: [current_ans_lookup_bool_exp!]
  _not: current_ans_lookup_bool_exp
  _or: [current_ans_lookup_bool_exp!]
  all_token_ownerships: current_token_ownerships_bool_exp
  domain: String_comparison_exp
  expiration_timestamp: timestamp_comparison_exp
  last_transaction_version: bigint_comparison_exp
  registered_address: String_comparison_exp
  subdomain: String_comparison_exp
}

"""Ordering options when selecting data from "current_ans_lookup"."""
input current_ans_lookup_order_by {
  all_token_ownerships_aggregate: current_token_ownerships_aggregate_order_by
  domain: order_by
  expiration_timestamp: order_by
  last_transaction_version: order_by
  registered_address: order_by
  subdomain: order_by
}

"""
select columns of table "current_ans_lookup"
"""
enum current_ans_lookup_select_column {
  """column name"""
  domain

  """column name"""
  expiration_timestamp

  """column name"""
  last_transaction_version

  """column name"""
  registered_address

  """column name"""
  subdomain
}

"""
Streaming cursor of the table "current_ans_lookup"
"""
input current_ans_lookup_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_ans_lookup_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_ans_lookup_stream_cursor_value_input {
  domain: String
  expiration_timestamp: timestamp
  last_transaction_version: bigint
  registered_address: String
  subdomain: String
}

"""
columns and relationships of "current_coin_balances"
"""
type current_coin_balances {
  amount: numeric!

  """An object relationship"""
  coin_info: coin_infos
  coin_type: String!
  coin_type_hash: String!
  last_transaction_timestamp: timestamp!
  last_transaction_version: bigint!
  owner_address: String!
}

"""
Boolean expression to filter rows from the table "current_coin_balances". All fields are combined with a logical 'AND'.
"""
input current_coin_balances_bool_exp {
  _and: [current_coin_balances_bool_exp!]
  _not: current_coin_balances_bool_exp
  _or: [current_coin_balances_bool_exp!]
  amount: numeric_comparison_exp
  coin_info: coin_infos_bool_exp
  coin_type: String_comparison_exp
  coin_type_hash: String_comparison_exp
  last_transaction_timestamp: timestamp_comparison_exp
  last_transaction_version: bigint_comparison_exp
  owner_address: String_comparison_exp
}

"""Ordering options when selecting data from "current_coin_balances"."""
input current_coin_balances_order_by {
  amount: order_by
  coin_info: coin_infos_order_by
  coin_type: order_by
  coin_type_hash: order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  owner_address: order_by
}

"""
select columns of table "current_coin_balances"
"""
enum current_coin_balances_select_column {
  """column name"""
  amount

  """column name"""
  coin_type

  """column name"""
  coin_type_hash

  """column name"""
  last_transaction_timestamp

  """column name"""
  last_transaction_version

  """column name"""
  owner_address
}

"""
Streaming cursor of the table "current_coin_balances"
"""
input current_coin_balances_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_coin_balances_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_coin_balances_stream_cursor_value_input {
  amount: numeric
  coin_type: String
  coin_type_hash: String
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  owner_address: String
}

"""
columns and relationships of "current_collection_datas"
"""
type current_collection_datas {
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!
  description: String!
  description_mutable: Boolean!
  last_transaction_timestamp: timestamp!
  last_transaction_version: bigint!
  maximum: numeric!
  maximum_mutable: Boolean!
  metadata_uri: String!
  supply: numeric!
  table_handle: String!
  uri_mutable: Boolean!
}

"""
Boolean expression to filter rows from the table "current_collection_datas". All fields are combined with a logical 'AND'.
"""
input current_collection_datas_bool_exp {
  _and: [current_collection_datas_bool_exp!]
  _not: current_collection_datas_bool_exp
  _or: [current_collection_datas_bool_exp!]
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  description: String_comparison_exp
  description_mutable: Boolean_comparison_exp
  last_transaction_timestamp: timestamp_comparison_exp
  last_transaction_version: bigint_comparison_exp
  maximum: numeric_comparison_exp
  maximum_mutable: Boolean_comparison_exp
  metadata_uri: String_comparison_exp
  supply: numeric_comparison_exp
  table_handle: String_comparison_exp
  uri_mutable: Boolean_comparison_exp
}

"""Ordering options when selecting data from "current_collection_datas"."""
input current_collection_datas_order_by {
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  description: order_by
  description_mutable: order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  maximum: order_by
  maximum_mutable: order_by
  metadata_uri: order_by
  supply: order_by
  table_handle: order_by
  uri_mutable: order_by
}

"""
select columns of table "current_collection_datas"
"""
enum current_collection_datas_select_column {
  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  description

  """column name"""
  description_mutable

  """column name"""
  last_transaction_timestamp

  """column name"""
  last_transaction_version

  """column name"""
  maximum

  """column name"""
  maximum_mutable

  """column name"""
  metadata_uri

  """column name"""
  supply

  """column name"""
  table_handle

  """column name"""
  uri_mutable
}

"""
Streaming cursor of the table "current_collection_datas"
"""
input current_collection_datas_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_collection_datas_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_collection_datas_stream_cursor_value_input {
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  description: String
  description_mutable: Boolean
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  maximum: numeric
  maximum_mutable: Boolean
  metadata_uri: String
  supply: numeric
  table_handle: String
  uri_mutable: Boolean
}

"""
columns and relationships of "current_staking_pool_voter"
"""
type current_staking_pool_voter {
  last_transaction_version: bigint!
  staking_pool_address: String!
  voter_address: String!
}

"""
Boolean expression to filter rows from the table "current_staking_pool_voter". All fields are combined with a logical 'AND'.
"""
input current_staking_pool_voter_bool_exp {
  _and: [current_staking_pool_voter_bool_exp!]
  _not: current_staking_pool_voter_bool_exp
  _or: [current_staking_pool_voter_bool_exp!]
  last_transaction_version: bigint_comparison_exp
  staking_pool_address: String_comparison_exp
  voter_address: String_comparison_exp
}

"""
Ordering options when selecting data from "current_staking_pool_voter".
"""
input current_staking_pool_voter_order_by {
  last_transaction_version: order_by
  staking_pool_address: order_by
  voter_address: order_by
}

"""
select columns of table "current_staking_pool_voter"
"""
enum current_staking_pool_voter_select_column {
  """column name"""
  last_transaction_version

  """column name"""
  staking_pool_address

  """column name"""
  voter_address
}

"""
Streaming cursor of the table "current_staking_pool_voter"
"""
input current_staking_pool_voter_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_staking_pool_voter_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_staking_pool_voter_stream_cursor_value_input {
  last_transaction_version: bigint
  staking_pool_address: String
  voter_address: String
}

"""
columns and relationships of "current_token_datas"
"""
type current_token_datas {
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!

  """An object relationship"""
  current_collection_data: current_collection_datas
  default_properties(
    """JSON select path"""
    path: String
  ): jsonb!
  description: String!
  description_mutable: Boolean!
  largest_property_version: numeric!
  last_transaction_timestamp: timestamp!
  last_transaction_version: bigint!
  maximum: numeric!
  maximum_mutable: Boolean!
  metadata_uri: String!
  name: String!
  payee_address: String!
  properties_mutable: Boolean!
  royalty_mutable: Boolean!
  royalty_points_denominator: numeric!
  royalty_points_numerator: numeric!
  supply: numeric!
  token_data_id_hash: String!
  uri_mutable: Boolean!
}

"""
Boolean expression to filter rows from the table "current_token_datas". All fields are combined with a logical 'AND'.
"""
input current_token_datas_bool_exp {
  _and: [current_token_datas_bool_exp!]
  _not: current_token_datas_bool_exp
  _or: [current_token_datas_bool_exp!]
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  current_collection_data: current_collection_datas_bool_exp
  default_properties: jsonb_comparison_exp
  description: String_comparison_exp
  description_mutable: Boolean_comparison_exp
  largest_property_version: numeric_comparison_exp
  last_transaction_timestamp: timestamp_comparison_exp
  last_transaction_version: bigint_comparison_exp
  maximum: numeric_comparison_exp
  maximum_mutable: Boolean_comparison_exp
  metadata_uri: String_comparison_exp
  name: String_comparison_exp
  payee_address: String_comparison_exp
  properties_mutable: Boolean_comparison_exp
  royalty_mutable: Boolean_comparison_exp
  royalty_points_denominator: numeric_comparison_exp
  royalty_points_numerator: numeric_comparison_exp
  supply: numeric_comparison_exp
  token_data_id_hash: String_comparison_exp
  uri_mutable: Boolean_comparison_exp
}

"""Ordering options when selecting data from "current_token_datas"."""
input current_token_datas_order_by {
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  current_collection_data: current_collection_datas_order_by
  default_properties: order_by
  description: order_by
  description_mutable: order_by
  largest_property_version: order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  maximum: order_by
  maximum_mutable: order_by
  metadata_uri: order_by
  name: order_by
  payee_address: order_by
  properties_mutable: order_by
  royalty_mutable: order_by
  royalty_points_denominator: order_by
  royalty_points_numerator: order_by
  supply: order_by
  token_data_id_hash: order_by
  uri_mutable: order_by
}

"""
select columns of table "current_token_datas"
"""
enum current_token_datas_select_column {
  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  default_properties

  """column name"""
  description

  """column name"""
  description_mutable

  """column name"""
  largest_property_version

  """column name"""
  last_transaction_timestamp

  """column name"""
  last_transaction_version

  """column name"""
  maximum

  """column name"""
  maximum_mutable

  """column name"""
  metadata_uri

  """column name"""
  name

  """column name"""
  payee_address

  """column name"""
  properties_mutable

  """column name"""
  royalty_mutable

  """column name"""
  royalty_points_denominator

  """column name"""
  royalty_points_numerator

  """column name"""
  supply

  """column name"""
  token_data_id_hash

  """column name"""
  uri_mutable
}

"""
Streaming cursor of the table "current_token_datas"
"""
input current_token_datas_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_token_datas_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_token_datas_stream_cursor_value_input {
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  default_properties: jsonb
  description: String
  description_mutable: Boolean
  largest_property_version: numeric
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  maximum: numeric
  maximum_mutable: Boolean
  metadata_uri: String
  name: String
  payee_address: String
  properties_mutable: Boolean
  royalty_mutable: Boolean
  royalty_points_denominator: numeric
  royalty_points_numerator: numeric
  supply: numeric
  token_data_id_hash: String
  uri_mutable: Boolean
}

"""
columns and relationships of "current_token_ownerships"
"""
type current_token_ownerships {
  amount: numeric!

  """An object relationship"""
  aptos_name: current_ans_lookup
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!

  """An object relationship"""
  current_collection_data: current_collection_datas

  """An object relationship"""
  current_token_data: current_token_datas
  last_transaction_timestamp: timestamp!
  last_transaction_version: bigint!
  name: String!
  owner_address: String!
  property_version: numeric!
  table_type: String!
  token_data_id_hash: String!
  token_properties(
    """JSON select path"""
    path: String
  ): jsonb!
}

"""
aggregated selection of "current_token_ownerships"
"""
type current_token_ownerships_aggregate {
  aggregate: current_token_ownerships_aggregate_fields
  nodes: [current_token_ownerships!]!
}

"""
aggregate fields of "current_token_ownerships"
"""
type current_token_ownerships_aggregate_fields {
  avg: current_token_ownerships_avg_fields
  count(columns: [current_token_ownerships_select_column!], distinct: Boolean): Int!
  max: current_token_ownerships_max_fields
  min: current_token_ownerships_min_fields
  stddev: current_token_ownerships_stddev_fields
  stddev_pop: current_token_ownerships_stddev_pop_fields
  stddev_samp: current_token_ownerships_stddev_samp_fields
  sum: current_token_ownerships_sum_fields
  var_pop: current_token_ownerships_var_pop_fields
  var_samp: current_token_ownerships_var_samp_fields
  variance: current_token_ownerships_variance_fields
}

"""
order by aggregate values of table "current_token_ownerships"
"""
input current_token_ownerships_aggregate_order_by {
  avg: current_token_ownerships_avg_order_by
  count: order_by
  max: current_token_ownerships_max_order_by
  min: current_token_ownerships_min_order_by
  stddev: current_token_ownerships_stddev_order_by
  stddev_pop: current_token_ownerships_stddev_pop_order_by
  stddev_samp: current_token_ownerships_stddev_samp_order_by
  sum: current_token_ownerships_sum_order_by
  var_pop: current_token_ownerships_var_pop_order_by
  var_samp: current_token_ownerships_var_samp_order_by
  variance: current_token_ownerships_variance_order_by
}

"""aggregate avg on columns"""
type current_token_ownerships_avg_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by avg() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_avg_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""
Boolean expression to filter rows from the table "current_token_ownerships". All fields are combined with a logical 'AND'.
"""
input current_token_ownerships_bool_exp {
  _and: [current_token_ownerships_bool_exp!]
  _not: current_token_ownerships_bool_exp
  _or: [current_token_ownerships_bool_exp!]
  amount: numeric_comparison_exp
  aptos_name: current_ans_lookup_bool_exp
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  current_collection_data: current_collection_datas_bool_exp
  current_token_data: current_token_datas_bool_exp
  last_transaction_timestamp: timestamp_comparison_exp
  last_transaction_version: bigint_comparison_exp
  name: String_comparison_exp
  owner_address: String_comparison_exp
  property_version: numeric_comparison_exp
  table_type: String_comparison_exp
  token_data_id_hash: String_comparison_exp
  token_properties: jsonb_comparison_exp
}

"""aggregate max on columns"""
type current_token_ownerships_max_fields {
  amount: numeric
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  name: String
  owner_address: String
  property_version: numeric
  table_type: String
  token_data_id_hash: String
}

"""
order by max() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_max_order_by {
  amount: order_by
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  name: order_by
  owner_address: order_by
  property_version: order_by
  table_type: order_by
  token_data_id_hash: order_by
}

"""aggregate min on columns"""
type current_token_ownerships_min_fields {
  amount: numeric
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  name: String
  owner_address: String
  property_version: numeric
  table_type: String
  token_data_id_hash: String
}

"""
order by min() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_min_order_by {
  amount: order_by
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  name: order_by
  owner_address: order_by
  property_version: order_by
  table_type: order_by
  token_data_id_hash: order_by
}

"""Ordering options when selecting data from "current_token_ownerships"."""
input current_token_ownerships_order_by {
  amount: order_by
  aptos_name: current_ans_lookup_order_by
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  current_collection_data: current_collection_datas_order_by
  current_token_data: current_token_datas_order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  name: order_by
  owner_address: order_by
  property_version: order_by
  table_type: order_by
  token_data_id_hash: order_by
  token_properties: order_by
}

"""
select columns of table "current_token_ownerships"
"""
enum current_token_ownerships_select_column {
  """column name"""
  amount

  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  last_transaction_timestamp

  """column name"""
  last_transaction_version

  """column name"""
  name

  """column name"""
  owner_address

  """column name"""
  property_version

  """column name"""
  table_type

  """column name"""
  token_data_id_hash

  """column name"""
  token_properties
}

"""aggregate stddev on columns"""
type current_token_ownerships_stddev_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by stddev() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_stddev_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""aggregate stddev_pop on columns"""
type current_token_ownerships_stddev_pop_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by stddev_pop() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_stddev_pop_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""aggregate stddev_samp on columns"""
type current_token_ownerships_stddev_samp_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by stddev_samp() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_stddev_samp_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""
Streaming cursor of the table "current_token_ownerships"
"""
input current_token_ownerships_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_token_ownerships_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_token_ownerships_stream_cursor_value_input {
  amount: numeric
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  name: String
  owner_address: String
  property_version: numeric
  table_type: String
  token_data_id_hash: String
  token_properties: jsonb
}

"""aggregate sum on columns"""
type current_token_ownerships_sum_fields {
  amount: numeric
  last_transaction_version: bigint
  property_version: numeric
}

"""
order by sum() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_sum_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""aggregate var_pop on columns"""
type current_token_ownerships_var_pop_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by var_pop() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_var_pop_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""aggregate var_samp on columns"""
type current_token_ownerships_var_samp_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by var_samp() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_var_samp_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""aggregate variance on columns"""
type current_token_ownerships_variance_fields {
  amount: Float
  last_transaction_version: Float
  property_version: Float
}

"""
order by variance() on columns of table "current_token_ownerships"
"""
input current_token_ownerships_variance_order_by {
  amount: order_by
  last_transaction_version: order_by
  property_version: order_by
}

"""
columns and relationships of "current_token_pending_claims"
"""
type current_token_pending_claims {
  amount: numeric!
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!

  """An object relationship"""
  current_collection_data: current_collection_datas

  """An object relationship"""
  current_token_data: current_token_datas
  from_address: String!
  last_transaction_timestamp: timestamp!
  last_transaction_version: bigint!
  name: String!
  property_version: numeric!
  table_handle: String!
  to_address: String!

  """An object relationship"""
  token: tokens
  token_data_id_hash: String!
}

"""
Boolean expression to filter rows from the table "current_token_pending_claims". All fields are combined with a logical 'AND'.
"""
input current_token_pending_claims_bool_exp {
  _and: [current_token_pending_claims_bool_exp!]
  _not: current_token_pending_claims_bool_exp
  _or: [current_token_pending_claims_bool_exp!]
  amount: numeric_comparison_exp
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  current_collection_data: current_collection_datas_bool_exp
  current_token_data: current_token_datas_bool_exp
  from_address: String_comparison_exp
  last_transaction_timestamp: timestamp_comparison_exp
  last_transaction_version: bigint_comparison_exp
  name: String_comparison_exp
  property_version: numeric_comparison_exp
  table_handle: String_comparison_exp
  to_address: String_comparison_exp
  token: tokens_bool_exp
  token_data_id_hash: String_comparison_exp
}

"""
Ordering options when selecting data from "current_token_pending_claims".
"""
input current_token_pending_claims_order_by {
  amount: order_by
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  current_collection_data: current_collection_datas_order_by
  current_token_data: current_token_datas_order_by
  from_address: order_by
  last_transaction_timestamp: order_by
  last_transaction_version: order_by
  name: order_by
  property_version: order_by
  table_handle: order_by
  to_address: order_by
  token: tokens_order_by
  token_data_id_hash: order_by
}

"""
select columns of table "current_token_pending_claims"
"""
enum current_token_pending_claims_select_column {
  """column name"""
  amount

  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  from_address

  """column name"""
  last_transaction_timestamp

  """column name"""
  last_transaction_version

  """column name"""
  name

  """column name"""
  property_version

  """column name"""
  table_handle

  """column name"""
  to_address

  """column name"""
  token_data_id_hash
}

"""
Streaming cursor of the table "current_token_pending_claims"
"""
input current_token_pending_claims_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: current_token_pending_claims_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input current_token_pending_claims_stream_cursor_value_input {
  amount: numeric
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  from_address: String
  last_transaction_timestamp: timestamp
  last_transaction_version: bigint
  name: String
  property_version: numeric
  table_handle: String
  to_address: String
  token_data_id_hash: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "indexer_status"
"""
type indexer_status {
  db: String!
  is_indexer_up: Boolean!
}

"""
Boolean expression to filter rows from the table "indexer_status". All fields are combined with a logical 'AND'.
"""
input indexer_status_bool_exp {
  _and: [indexer_status_bool_exp!]
  _not: indexer_status_bool_exp
  _or: [indexer_status_bool_exp!]
  db: String_comparison_exp
  is_indexer_up: Boolean_comparison_exp
}

"""Ordering options when selecting data from "indexer_status"."""
input indexer_status_order_by {
  db: order_by
  is_indexer_up: order_by
}

"""
select columns of table "indexer_status"
"""
enum indexer_status_select_column {
  """column name"""
  db

  """column name"""
  is_indexer_up
}

"""
Streaming cursor of the table "indexer_status"
"""
input indexer_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: indexer_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input indexer_status_stream_cursor_value_input {
  db: String
  is_indexer_up: Boolean
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "ledger_infos"
"""
type ledger_infos {
  chain_id: bigint!
}

"""
Boolean expression to filter rows from the table "ledger_infos". All fields are combined with a logical 'AND'.
"""
input ledger_infos_bool_exp {
  _and: [ledger_infos_bool_exp!]
  _not: ledger_infos_bool_exp
  _or: [ledger_infos_bool_exp!]
  chain_id: bigint_comparison_exp
}

"""Ordering options when selecting data from "ledger_infos"."""
input ledger_infos_order_by {
  chain_id: order_by
}

"""
select columns of table "ledger_infos"
"""
enum ledger_infos_select_column {
  """column name"""
  chain_id
}

"""
Streaming cursor of the table "ledger_infos"
"""
input ledger_infos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ledger_infos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ledger_infos_stream_cursor_value_input {
  chain_id: bigint
}

"""
columns and relationships of "move_resources"
"""
type move_resources {
  address: String!
  transaction_version: bigint!
}

"""
aggregated selection of "move_resources"
"""
type move_resources_aggregate {
  aggregate: move_resources_aggregate_fields
  nodes: [move_resources!]!
}

"""
aggregate fields of "move_resources"
"""
type move_resources_aggregate_fields {
  avg: move_resources_avg_fields
  count(columns: [move_resources_select_column!], distinct: Boolean): Int!
  max: move_resources_max_fields
  min: move_resources_min_fields
  stddev: move_resources_stddev_fields
  stddev_pop: move_resources_stddev_pop_fields
  stddev_samp: move_resources_stddev_samp_fields
  sum: move_resources_sum_fields
  var_pop: move_resources_var_pop_fields
  var_samp: move_resources_var_samp_fields
  variance: move_resources_variance_fields
}

"""aggregate avg on columns"""
type move_resources_avg_fields {
  transaction_version: Float
}

"""
Boolean expression to filter rows from the table "move_resources". All fields are combined with a logical 'AND'.
"""
input move_resources_bool_exp {
  _and: [move_resources_bool_exp!]
  _not: move_resources_bool_exp
  _or: [move_resources_bool_exp!]
  address: String_comparison_exp
  transaction_version: bigint_comparison_exp
}

"""aggregate max on columns"""
type move_resources_max_fields {
  address: String
  transaction_version: bigint
}

"""aggregate min on columns"""
type move_resources_min_fields {
  address: String
  transaction_version: bigint
}

"""Ordering options when selecting data from "move_resources"."""
input move_resources_order_by {
  address: order_by
  transaction_version: order_by
}

"""
select columns of table "move_resources"
"""
enum move_resources_select_column {
  """column name"""
  address

  """column name"""
  transaction_version
}

"""aggregate stddev on columns"""
type move_resources_stddev_fields {
  transaction_version: Float
}

"""aggregate stddev_pop on columns"""
type move_resources_stddev_pop_fields {
  transaction_version: Float
}

"""aggregate stddev_samp on columns"""
type move_resources_stddev_samp_fields {
  transaction_version: Float
}

"""
Streaming cursor of the table "move_resources"
"""
input move_resources_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: move_resources_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input move_resources_stream_cursor_value_input {
  address: String
  transaction_version: bigint
}

"""aggregate sum on columns"""
type move_resources_sum_fields {
  transaction_version: bigint
}

"""aggregate var_pop on columns"""
type move_resources_var_pop_fields {
  transaction_version: Float
}

"""aggregate var_samp on columns"""
type move_resources_var_samp_fields {
  transaction_version: Float
}

"""aggregate variance on columns"""
type move_resources_variance_fields {
  transaction_version: Float
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "processor_status"
"""
type processor_status {
  last_success_version: bigint!
  processor: String!
}

"""
Boolean expression to filter rows from the table "processor_status". All fields are combined with a logical 'AND'.
"""
input processor_status_bool_exp {
  _and: [processor_status_bool_exp!]
  _not: processor_status_bool_exp
  _or: [processor_status_bool_exp!]
  last_success_version: bigint_comparison_exp
  processor: String_comparison_exp
}

"""Ordering options when selecting data from "processor_status"."""
input processor_status_order_by {
  last_success_version: order_by
  processor: order_by
}

"""
select columns of table "processor_status"
"""
enum processor_status_select_column {
  """column name"""
  last_success_version

  """column name"""
  processor
}

"""
Streaming cursor of the table "processor_status"
"""
input processor_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: processor_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input processor_status_stream_cursor_value_input {
  last_success_version: bigint
  processor: String
}

"""
columns and relationships of "proposal_votes"
"""
type proposal_votes {
  num_votes: numeric!
  proposal_id: bigint!
  should_pass: Boolean!
  staking_pool_address: String!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
  voter_address: String!
}

"""
aggregated selection of "proposal_votes"
"""
type proposal_votes_aggregate {
  aggregate: proposal_votes_aggregate_fields
  nodes: [proposal_votes!]!
}

"""
aggregate fields of "proposal_votes"
"""
type proposal_votes_aggregate_fields {
  avg: proposal_votes_avg_fields
  count(columns: [proposal_votes_select_column!], distinct: Boolean): Int!
  max: proposal_votes_max_fields
  min: proposal_votes_min_fields
  stddev: proposal_votes_stddev_fields
  stddev_pop: proposal_votes_stddev_pop_fields
  stddev_samp: proposal_votes_stddev_samp_fields
  sum: proposal_votes_sum_fields
  var_pop: proposal_votes_var_pop_fields
  var_samp: proposal_votes_var_samp_fields
  variance: proposal_votes_variance_fields
}

"""aggregate avg on columns"""
type proposal_votes_avg_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

"""
Boolean expression to filter rows from the table "proposal_votes". All fields are combined with a logical 'AND'.
"""
input proposal_votes_bool_exp {
  _and: [proposal_votes_bool_exp!]
  _not: proposal_votes_bool_exp
  _or: [proposal_votes_bool_exp!]
  num_votes: numeric_comparison_exp
  proposal_id: bigint_comparison_exp
  should_pass: Boolean_comparison_exp
  staking_pool_address: String_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
  voter_address: String_comparison_exp
}

"""aggregate max on columns"""
type proposal_votes_max_fields {
  num_votes: numeric
  proposal_id: bigint
  staking_pool_address: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  voter_address: String
}

"""aggregate min on columns"""
type proposal_votes_min_fields {
  num_votes: numeric
  proposal_id: bigint
  staking_pool_address: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  voter_address: String
}

"""Ordering options when selecting data from "proposal_votes"."""
input proposal_votes_order_by {
  num_votes: order_by
  proposal_id: order_by
  should_pass: order_by
  staking_pool_address: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
  voter_address: order_by
}

"""
select columns of table "proposal_votes"
"""
enum proposal_votes_select_column {
  """column name"""
  num_votes

  """column name"""
  proposal_id

  """column name"""
  should_pass

  """column name"""
  staking_pool_address

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version

  """column name"""
  voter_address
}

"""aggregate stddev on columns"""
type proposal_votes_stddev_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

"""aggregate stddev_pop on columns"""
type proposal_votes_stddev_pop_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

"""aggregate stddev_samp on columns"""
type proposal_votes_stddev_samp_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

"""
Streaming cursor of the table "proposal_votes"
"""
input proposal_votes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposal_votes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposal_votes_stream_cursor_value_input {
  num_votes: numeric
  proposal_id: bigint
  should_pass: Boolean
  staking_pool_address: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  voter_address: String
}

"""aggregate sum on columns"""
type proposal_votes_sum_fields {
  num_votes: numeric
  proposal_id: bigint
  transaction_version: bigint
}

"""aggregate var_pop on columns"""
type proposal_votes_var_pop_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

"""aggregate var_samp on columns"""
type proposal_votes_var_samp_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

"""aggregate variance on columns"""
type proposal_votes_variance_fields {
  num_votes: Float
  proposal_id: Float
  transaction_version: Float
}

type query_root {
  """
  fetch data from the table: "coin_activities"
  """
  coin_activities(
    """distinct select on columns"""
    distinct_on: [coin_activities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_activities_order_by!]

    """filter the rows returned"""
    where: coin_activities_bool_exp
  ): [coin_activities!]!

  """fetch data from the table: "coin_activities" using primary key columns"""
  coin_activities_by_pk(event_account_address: String!, event_creation_number: bigint!, event_sequence_number: bigint!, transaction_version: bigint!): coin_activities

  """
  fetch data from the table: "coin_balances"
  """
  coin_balances(
    """distinct select on columns"""
    distinct_on: [coin_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_balances_order_by!]

    """filter the rows returned"""
    where: coin_balances_bool_exp
  ): [coin_balances!]!

  """fetch data from the table: "coin_balances" using primary key columns"""
  coin_balances_by_pk(coin_type_hash: String!, owner_address: String!, transaction_version: bigint!): coin_balances

  """
  fetch data from the table: "coin_infos"
  """
  coin_infos(
    """distinct select on columns"""
    distinct_on: [coin_infos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_infos_order_by!]

    """filter the rows returned"""
    where: coin_infos_bool_exp
  ): [coin_infos!]!

  """fetch data from the table: "coin_infos" using primary key columns"""
  coin_infos_by_pk(coin_type_hash: String!): coin_infos

  """
  fetch data from the table: "coin_supply"
  """
  coin_supply(
    """distinct select on columns"""
    distinct_on: [coin_supply_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_supply_order_by!]

    """filter the rows returned"""
    where: coin_supply_bool_exp
  ): [coin_supply!]!

  """fetch data from the table: "coin_supply" using primary key columns"""
  coin_supply_by_pk(coin_type_hash: String!, transaction_version: bigint!): coin_supply

  """
  fetch data from the table: "collection_datas"
  """
  collection_datas(
    """distinct select on columns"""
    distinct_on: [collection_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collection_datas_order_by!]

    """filter the rows returned"""
    where: collection_datas_bool_exp
  ): [collection_datas!]!

  """
  fetch data from the table: "collection_datas" using primary key columns
  """
  collection_datas_by_pk(collection_data_id_hash: String!, transaction_version: bigint!): collection_datas

  """
  fetch data from the table: "current_ans_lookup"
  """
  current_ans_lookup(
    """distinct select on columns"""
    distinct_on: [current_ans_lookup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_ans_lookup_order_by!]

    """filter the rows returned"""
    where: current_ans_lookup_bool_exp
  ): [current_ans_lookup!]!

  """
  fetch data from the table: "current_ans_lookup" using primary key columns
  """
  current_ans_lookup_by_pk(domain: String!, subdomain: String!): current_ans_lookup

  """
  fetch data from the table: "current_coin_balances"
  """
  current_coin_balances(
    """distinct select on columns"""
    distinct_on: [current_coin_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_coin_balances_order_by!]

    """filter the rows returned"""
    where: current_coin_balances_bool_exp
  ): [current_coin_balances!]!

  """
  fetch data from the table: "current_coin_balances" using primary key columns
  """
  current_coin_balances_by_pk(coin_type_hash: String!, owner_address: String!): current_coin_balances

  """
  fetch data from the table: "current_collection_datas"
  """
  current_collection_datas(
    """distinct select on columns"""
    distinct_on: [current_collection_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_collection_datas_order_by!]

    """filter the rows returned"""
    where: current_collection_datas_bool_exp
  ): [current_collection_datas!]!

  """
  fetch data from the table: "current_collection_datas" using primary key columns
  """
  current_collection_datas_by_pk(collection_data_id_hash: String!): current_collection_datas

  """
  fetch data from the table: "current_staking_pool_voter"
  """
  current_staking_pool_voter(
    """distinct select on columns"""
    distinct_on: [current_staking_pool_voter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_staking_pool_voter_order_by!]

    """filter the rows returned"""
    where: current_staking_pool_voter_bool_exp
  ): [current_staking_pool_voter!]!

  """
  fetch data from the table: "current_staking_pool_voter" using primary key columns
  """
  current_staking_pool_voter_by_pk(staking_pool_address: String!): current_staking_pool_voter

  """
  fetch data from the table: "current_token_datas"
  """
  current_token_datas(
    """distinct select on columns"""
    distinct_on: [current_token_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_datas_order_by!]

    """filter the rows returned"""
    where: current_token_datas_bool_exp
  ): [current_token_datas!]!

  """
  fetch data from the table: "current_token_datas" using primary key columns
  """
  current_token_datas_by_pk(token_data_id_hash: String!): current_token_datas

  """
  fetch data from the table: "current_token_ownerships"
  """
  current_token_ownerships(
    """distinct select on columns"""
    distinct_on: [current_token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_ownerships_order_by!]

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): [current_token_ownerships!]!

  """
  fetch aggregated fields from the table: "current_token_ownerships"
  """
  current_token_ownerships_aggregate(
    """distinct select on columns"""
    distinct_on: [current_token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_ownerships_order_by!]

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): current_token_ownerships_aggregate!

  """
  fetch data from the table: "current_token_ownerships" using primary key columns
  """
  current_token_ownerships_by_pk(owner_address: String!, property_version: numeric!, token_data_id_hash: String!): current_token_ownerships

  """
  fetch data from the table: "current_token_pending_claims"
  """
  current_token_pending_claims(
    """distinct select on columns"""
    distinct_on: [current_token_pending_claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_pending_claims_order_by!]

    """filter the rows returned"""
    where: current_token_pending_claims_bool_exp
  ): [current_token_pending_claims!]!

  """
  fetch data from the table: "current_token_pending_claims" using primary key columns
  """
  current_token_pending_claims_by_pk(from_address: String!, property_version: numeric!, to_address: String!, token_data_id_hash: String!): current_token_pending_claims

  """
  fetch data from the table: "indexer_status"
  """
  indexer_status(
    """distinct select on columns"""
    distinct_on: [indexer_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_status_order_by!]

    """filter the rows returned"""
    where: indexer_status_bool_exp
  ): [indexer_status!]!

  """fetch data from the table: "indexer_status" using primary key columns"""
  indexer_status_by_pk(db: String!): indexer_status

  """
  fetch data from the table: "ledger_infos"
  """
  ledger_infos(
    """distinct select on columns"""
    distinct_on: [ledger_infos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ledger_infos_order_by!]

    """filter the rows returned"""
    where: ledger_infos_bool_exp
  ): [ledger_infos!]!

  """fetch data from the table: "ledger_infos" using primary key columns"""
  ledger_infos_by_pk(chain_id: bigint!): ledger_infos

  """
  fetch data from the table: "move_resources"
  """
  move_resources(
    """distinct select on columns"""
    distinct_on: [move_resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [move_resources_order_by!]

    """filter the rows returned"""
    where: move_resources_bool_exp
  ): [move_resources!]!

  """
  fetch aggregated fields from the table: "move_resources"
  """
  move_resources_aggregate(
    """distinct select on columns"""
    distinct_on: [move_resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [move_resources_order_by!]

    """filter the rows returned"""
    where: move_resources_bool_exp
  ): move_resources_aggregate!

  """
  fetch data from the table: "processor_status"
  """
  processor_status(
    """distinct select on columns"""
    distinct_on: [processor_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [processor_status_order_by!]

    """filter the rows returned"""
    where: processor_status_bool_exp
  ): [processor_status!]!

  """
  fetch data from the table: "processor_status" using primary key columns
  """
  processor_status_by_pk(processor: String!): processor_status

  """
  fetch data from the table: "proposal_votes"
  """
  proposal_votes(
    """distinct select on columns"""
    distinct_on: [proposal_votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_votes_order_by!]

    """filter the rows returned"""
    where: proposal_votes_bool_exp
  ): [proposal_votes!]!

  """
  fetch aggregated fields from the table: "proposal_votes"
  """
  proposal_votes_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_votes_order_by!]

    """filter the rows returned"""
    where: proposal_votes_bool_exp
  ): proposal_votes_aggregate!

  """fetch data from the table: "proposal_votes" using primary key columns"""
  proposal_votes_by_pk(proposal_id: bigint!, transaction_version: bigint!, voter_address: String!): proposal_votes

  """
  fetch data from the table: "token_activities"
  """
  token_activities(
    """distinct select on columns"""
    distinct_on: [token_activities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_activities_order_by!]

    """filter the rows returned"""
    where: token_activities_bool_exp
  ): [token_activities!]!

  """
  fetch aggregated fields from the table: "token_activities"
  """
  token_activities_aggregate(
    """distinct select on columns"""
    distinct_on: [token_activities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_activities_order_by!]

    """filter the rows returned"""
    where: token_activities_bool_exp
  ): token_activities_aggregate!

  """
  fetch data from the table: "token_activities" using primary key columns
  """
  token_activities_by_pk(event_account_address: String!, event_creation_number: bigint!, event_sequence_number: bigint!, transaction_version: bigint!): token_activities

  """
  fetch data from the table: "token_datas"
  """
  token_datas(
    """distinct select on columns"""
    distinct_on: [token_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_datas_order_by!]

    """filter the rows returned"""
    where: token_datas_bool_exp
  ): [token_datas!]!

  """fetch data from the table: "token_datas" using primary key columns"""
  token_datas_by_pk(token_data_id_hash: String!, transaction_version: bigint!): token_datas

  """
  fetch data from the table: "token_ownerships"
  """
  token_ownerships(
    """distinct select on columns"""
    distinct_on: [token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_ownerships_order_by!]

    """filter the rows returned"""
    where: token_ownerships_bool_exp
  ): [token_ownerships!]!

  """
  fetch data from the table: "token_ownerships" using primary key columns
  """
  token_ownerships_by_pk(property_version: numeric!, table_handle: String!, token_data_id_hash: String!, transaction_version: bigint!): token_ownerships

  """
  fetch data from the table: "tokens"
  """
  tokens(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """fetch data from the table: "tokens" using primary key columns"""
  tokens_by_pk(property_version: numeric!, token_data_id_hash: String!, transaction_version: bigint!): tokens

  """
  fetch data from the table: "user_transactions"
  """
  user_transactions(
    """distinct select on columns"""
    distinct_on: [user_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_transactions_order_by!]

    """filter the rows returned"""
    where: user_transactions_bool_exp
  ): [user_transactions!]!

  """
  fetch data from the table: "user_transactions" using primary key columns
  """
  user_transactions_by_pk(version: bigint!): user_transactions
}

type subscription_root {
  """
  fetch data from the table: "coin_activities"
  """
  coin_activities(
    """distinct select on columns"""
    distinct_on: [coin_activities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_activities_order_by!]

    """filter the rows returned"""
    where: coin_activities_bool_exp
  ): [coin_activities!]!

  """fetch data from the table: "coin_activities" using primary key columns"""
  coin_activities_by_pk(event_account_address: String!, event_creation_number: bigint!, event_sequence_number: bigint!, transaction_version: bigint!): coin_activities

  """
  fetch data from the table in a streaming manner : "coin_activities"
  """
  coin_activities_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [coin_activities_stream_cursor_input]!

    """filter the rows returned"""
    where: coin_activities_bool_exp
  ): [coin_activities!]!

  """
  fetch data from the table: "coin_balances"
  """
  coin_balances(
    """distinct select on columns"""
    distinct_on: [coin_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_balances_order_by!]

    """filter the rows returned"""
    where: coin_balances_bool_exp
  ): [coin_balances!]!

  """fetch data from the table: "coin_balances" using primary key columns"""
  coin_balances_by_pk(coin_type_hash: String!, owner_address: String!, transaction_version: bigint!): coin_balances

  """
  fetch data from the table in a streaming manner : "coin_balances"
  """
  coin_balances_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [coin_balances_stream_cursor_input]!

    """filter the rows returned"""
    where: coin_balances_bool_exp
  ): [coin_balances!]!

  """
  fetch data from the table: "coin_infos"
  """
  coin_infos(
    """distinct select on columns"""
    distinct_on: [coin_infos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_infos_order_by!]

    """filter the rows returned"""
    where: coin_infos_bool_exp
  ): [coin_infos!]!

  """fetch data from the table: "coin_infos" using primary key columns"""
  coin_infos_by_pk(coin_type_hash: String!): coin_infos

  """
  fetch data from the table in a streaming manner : "coin_infos"
  """
  coin_infos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [coin_infos_stream_cursor_input]!

    """filter the rows returned"""
    where: coin_infos_bool_exp
  ): [coin_infos!]!

  """
  fetch data from the table: "coin_supply"
  """
  coin_supply(
    """distinct select on columns"""
    distinct_on: [coin_supply_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [coin_supply_order_by!]

    """filter the rows returned"""
    where: coin_supply_bool_exp
  ): [coin_supply!]!

  """fetch data from the table: "coin_supply" using primary key columns"""
  coin_supply_by_pk(coin_type_hash: String!, transaction_version: bigint!): coin_supply

  """
  fetch data from the table in a streaming manner : "coin_supply"
  """
  coin_supply_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [coin_supply_stream_cursor_input]!

    """filter the rows returned"""
    where: coin_supply_bool_exp
  ): [coin_supply!]!

  """
  fetch data from the table: "collection_datas"
  """
  collection_datas(
    """distinct select on columns"""
    distinct_on: [collection_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collection_datas_order_by!]

    """filter the rows returned"""
    where: collection_datas_bool_exp
  ): [collection_datas!]!

  """
  fetch data from the table: "collection_datas" using primary key columns
  """
  collection_datas_by_pk(collection_data_id_hash: String!, transaction_version: bigint!): collection_datas

  """
  fetch data from the table in a streaming manner : "collection_datas"
  """
  collection_datas_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [collection_datas_stream_cursor_input]!

    """filter the rows returned"""
    where: collection_datas_bool_exp
  ): [collection_datas!]!

  """
  fetch data from the table: "current_ans_lookup"
  """
  current_ans_lookup(
    """distinct select on columns"""
    distinct_on: [current_ans_lookup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_ans_lookup_order_by!]

    """filter the rows returned"""
    where: current_ans_lookup_bool_exp
  ): [current_ans_lookup!]!

  """
  fetch data from the table: "current_ans_lookup" using primary key columns
  """
  current_ans_lookup_by_pk(domain: String!, subdomain: String!): current_ans_lookup

  """
  fetch data from the table in a streaming manner : "current_ans_lookup"
  """
  current_ans_lookup_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_ans_lookup_stream_cursor_input]!

    """filter the rows returned"""
    where: current_ans_lookup_bool_exp
  ): [current_ans_lookup!]!

  """
  fetch data from the table: "current_coin_balances"
  """
  current_coin_balances(
    """distinct select on columns"""
    distinct_on: [current_coin_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_coin_balances_order_by!]

    """filter the rows returned"""
    where: current_coin_balances_bool_exp
  ): [current_coin_balances!]!

  """
  fetch data from the table: "current_coin_balances" using primary key columns
  """
  current_coin_balances_by_pk(coin_type_hash: String!, owner_address: String!): current_coin_balances

  """
  fetch data from the table in a streaming manner : "current_coin_balances"
  """
  current_coin_balances_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_coin_balances_stream_cursor_input]!

    """filter the rows returned"""
    where: current_coin_balances_bool_exp
  ): [current_coin_balances!]!

  """
  fetch data from the table: "current_collection_datas"
  """
  current_collection_datas(
    """distinct select on columns"""
    distinct_on: [current_collection_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_collection_datas_order_by!]

    """filter the rows returned"""
    where: current_collection_datas_bool_exp
  ): [current_collection_datas!]!

  """
  fetch data from the table: "current_collection_datas" using primary key columns
  """
  current_collection_datas_by_pk(collection_data_id_hash: String!): current_collection_datas

  """
  fetch data from the table in a streaming manner : "current_collection_datas"
  """
  current_collection_datas_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_collection_datas_stream_cursor_input]!

    """filter the rows returned"""
    where: current_collection_datas_bool_exp
  ): [current_collection_datas!]!

  """
  fetch data from the table: "current_staking_pool_voter"
  """
  current_staking_pool_voter(
    """distinct select on columns"""
    distinct_on: [current_staking_pool_voter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_staking_pool_voter_order_by!]

    """filter the rows returned"""
    where: current_staking_pool_voter_bool_exp
  ): [current_staking_pool_voter!]!

  """
  fetch data from the table: "current_staking_pool_voter" using primary key columns
  """
  current_staking_pool_voter_by_pk(staking_pool_address: String!): current_staking_pool_voter

  """
  fetch data from the table in a streaming manner : "current_staking_pool_voter"
  """
  current_staking_pool_voter_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_staking_pool_voter_stream_cursor_input]!

    """filter the rows returned"""
    where: current_staking_pool_voter_bool_exp
  ): [current_staking_pool_voter!]!

  """
  fetch data from the table: "current_token_datas"
  """
  current_token_datas(
    """distinct select on columns"""
    distinct_on: [current_token_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_datas_order_by!]

    """filter the rows returned"""
    where: current_token_datas_bool_exp
  ): [current_token_datas!]!

  """
  fetch data from the table: "current_token_datas" using primary key columns
  """
  current_token_datas_by_pk(token_data_id_hash: String!): current_token_datas

  """
  fetch data from the table in a streaming manner : "current_token_datas"
  """
  current_token_datas_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_token_datas_stream_cursor_input]!

    """filter the rows returned"""
    where: current_token_datas_bool_exp
  ): [current_token_datas!]!

  """
  fetch data from the table: "current_token_ownerships"
  """
  current_token_ownerships(
    """distinct select on columns"""
    distinct_on: [current_token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_ownerships_order_by!]

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): [current_token_ownerships!]!

  """
  fetch aggregated fields from the table: "current_token_ownerships"
  """
  current_token_ownerships_aggregate(
    """distinct select on columns"""
    distinct_on: [current_token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_ownerships_order_by!]

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): current_token_ownerships_aggregate!

  """
  fetch data from the table: "current_token_ownerships" using primary key columns
  """
  current_token_ownerships_by_pk(owner_address: String!, property_version: numeric!, token_data_id_hash: String!): current_token_ownerships

  """
  fetch data from the table in a streaming manner : "current_token_ownerships"
  """
  current_token_ownerships_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_token_ownerships_stream_cursor_input]!

    """filter the rows returned"""
    where: current_token_ownerships_bool_exp
  ): [current_token_ownerships!]!

  """
  fetch data from the table: "current_token_pending_claims"
  """
  current_token_pending_claims(
    """distinct select on columns"""
    distinct_on: [current_token_pending_claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [current_token_pending_claims_order_by!]

    """filter the rows returned"""
    where: current_token_pending_claims_bool_exp
  ): [current_token_pending_claims!]!

  """
  fetch data from the table: "current_token_pending_claims" using primary key columns
  """
  current_token_pending_claims_by_pk(from_address: String!, property_version: numeric!, to_address: String!, token_data_id_hash: String!): current_token_pending_claims

  """
  fetch data from the table in a streaming manner : "current_token_pending_claims"
  """
  current_token_pending_claims_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [current_token_pending_claims_stream_cursor_input]!

    """filter the rows returned"""
    where: current_token_pending_claims_bool_exp
  ): [current_token_pending_claims!]!

  """
  fetch data from the table: "indexer_status"
  """
  indexer_status(
    """distinct select on columns"""
    distinct_on: [indexer_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_status_order_by!]

    """filter the rows returned"""
    where: indexer_status_bool_exp
  ): [indexer_status!]!

  """fetch data from the table: "indexer_status" using primary key columns"""
  indexer_status_by_pk(db: String!): indexer_status

  """
  fetch data from the table in a streaming manner : "indexer_status"
  """
  indexer_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [indexer_status_stream_cursor_input]!

    """filter the rows returned"""
    where: indexer_status_bool_exp
  ): [indexer_status!]!

  """
  fetch data from the table: "ledger_infos"
  """
  ledger_infos(
    """distinct select on columns"""
    distinct_on: [ledger_infos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ledger_infos_order_by!]

    """filter the rows returned"""
    where: ledger_infos_bool_exp
  ): [ledger_infos!]!

  """fetch data from the table: "ledger_infos" using primary key columns"""
  ledger_infos_by_pk(chain_id: bigint!): ledger_infos

  """
  fetch data from the table in a streaming manner : "ledger_infos"
  """
  ledger_infos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ledger_infos_stream_cursor_input]!

    """filter the rows returned"""
    where: ledger_infos_bool_exp
  ): [ledger_infos!]!

  """
  fetch data from the table: "move_resources"
  """
  move_resources(
    """distinct select on columns"""
    distinct_on: [move_resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [move_resources_order_by!]

    """filter the rows returned"""
    where: move_resources_bool_exp
  ): [move_resources!]!

  """
  fetch aggregated fields from the table: "move_resources"
  """
  move_resources_aggregate(
    """distinct select on columns"""
    distinct_on: [move_resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [move_resources_order_by!]

    """filter the rows returned"""
    where: move_resources_bool_exp
  ): move_resources_aggregate!

  """
  fetch data from the table in a streaming manner : "move_resources"
  """
  move_resources_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [move_resources_stream_cursor_input]!

    """filter the rows returned"""
    where: move_resources_bool_exp
  ): [move_resources!]!

  """
  fetch data from the table: "processor_status"
  """
  processor_status(
    """distinct select on columns"""
    distinct_on: [processor_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [processor_status_order_by!]

    """filter the rows returned"""
    where: processor_status_bool_exp
  ): [processor_status!]!

  """
  fetch data from the table: "processor_status" using primary key columns
  """
  processor_status_by_pk(processor: String!): processor_status

  """
  fetch data from the table in a streaming manner : "processor_status"
  """
  processor_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [processor_status_stream_cursor_input]!

    """filter the rows returned"""
    where: processor_status_bool_exp
  ): [processor_status!]!

  """
  fetch data from the table: "proposal_votes"
  """
  proposal_votes(
    """distinct select on columns"""
    distinct_on: [proposal_votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_votes_order_by!]

    """filter the rows returned"""
    where: proposal_votes_bool_exp
  ): [proposal_votes!]!

  """
  fetch aggregated fields from the table: "proposal_votes"
  """
  proposal_votes_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_votes_order_by!]

    """filter the rows returned"""
    where: proposal_votes_bool_exp
  ): proposal_votes_aggregate!

  """fetch data from the table: "proposal_votes" using primary key columns"""
  proposal_votes_by_pk(proposal_id: bigint!, transaction_version: bigint!, voter_address: String!): proposal_votes

  """
  fetch data from the table in a streaming manner : "proposal_votes"
  """
  proposal_votes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposal_votes_stream_cursor_input]!

    """filter the rows returned"""
    where: proposal_votes_bool_exp
  ): [proposal_votes!]!

  """
  fetch data from the table: "token_activities"
  """
  token_activities(
    """distinct select on columns"""
    distinct_on: [token_activities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_activities_order_by!]

    """filter the rows returned"""
    where: token_activities_bool_exp
  ): [token_activities!]!

  """
  fetch aggregated fields from the table: "token_activities"
  """
  token_activities_aggregate(
    """distinct select on columns"""
    distinct_on: [token_activities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_activities_order_by!]

    """filter the rows returned"""
    where: token_activities_bool_exp
  ): token_activities_aggregate!

  """
  fetch data from the table: "token_activities" using primary key columns
  """
  token_activities_by_pk(event_account_address: String!, event_creation_number: bigint!, event_sequence_number: bigint!, transaction_version: bigint!): token_activities

  """
  fetch data from the table in a streaming manner : "token_activities"
  """
  token_activities_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_activities_stream_cursor_input]!

    """filter the rows returned"""
    where: token_activities_bool_exp
  ): [token_activities!]!

  """
  fetch data from the table: "token_datas"
  """
  token_datas(
    """distinct select on columns"""
    distinct_on: [token_datas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_datas_order_by!]

    """filter the rows returned"""
    where: token_datas_bool_exp
  ): [token_datas!]!

  """fetch data from the table: "token_datas" using primary key columns"""
  token_datas_by_pk(token_data_id_hash: String!, transaction_version: bigint!): token_datas

  """
  fetch data from the table in a streaming manner : "token_datas"
  """
  token_datas_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_datas_stream_cursor_input]!

    """filter the rows returned"""
    where: token_datas_bool_exp
  ): [token_datas!]!

  """
  fetch data from the table: "token_ownerships"
  """
  token_ownerships(
    """distinct select on columns"""
    distinct_on: [token_ownerships_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_ownerships_order_by!]

    """filter the rows returned"""
    where: token_ownerships_bool_exp
  ): [token_ownerships!]!

  """
  fetch data from the table: "token_ownerships" using primary key columns
  """
  token_ownerships_by_pk(property_version: numeric!, table_handle: String!, token_data_id_hash: String!, transaction_version: bigint!): token_ownerships

  """
  fetch data from the table in a streaming manner : "token_ownerships"
  """
  token_ownerships_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_ownerships_stream_cursor_input]!

    """filter the rows returned"""
    where: token_ownerships_bool_exp
  ): [token_ownerships!]!

  """
  fetch data from the table: "tokens"
  """
  tokens(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """fetch data from the table: "tokens" using primary key columns"""
  tokens_by_pk(property_version: numeric!, token_data_id_hash: String!, transaction_version: bigint!): tokens

  """
  fetch data from the table in a streaming manner : "tokens"
  """
  tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """
  fetch data from the table: "user_transactions"
  """
  user_transactions(
    """distinct select on columns"""
    distinct_on: [user_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_transactions_order_by!]

    """filter the rows returned"""
    where: user_transactions_bool_exp
  ): [user_transactions!]!

  """
  fetch data from the table: "user_transactions" using primary key columns
  """
  user_transactions_by_pk(version: bigint!): user_transactions

  """
  fetch data from the table in a streaming manner : "user_transactions"
  """
  user_transactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_transactions_stream_cursor_input]!

    """filter the rows returned"""
    where: user_transactions_bool_exp
  ): [user_transactions!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "token_activities"
"""
type token_activities {
  coin_amount: numeric
  coin_type: String
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!
  event_account_address: String!
  event_creation_number: bigint!
  event_sequence_number: bigint!
  from_address: String
  name: String!
  property_version: numeric!
  to_address: String
  token_amount: numeric!
  token_data_id_hash: String!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
  transfer_type: String!
}

"""
aggregated selection of "token_activities"
"""
type token_activities_aggregate {
  aggregate: token_activities_aggregate_fields
  nodes: [token_activities!]!
}

"""
aggregate fields of "token_activities"
"""
type token_activities_aggregate_fields {
  avg: token_activities_avg_fields
  count(columns: [token_activities_select_column!], distinct: Boolean): Int!
  max: token_activities_max_fields
  min: token_activities_min_fields
  stddev: token_activities_stddev_fields
  stddev_pop: token_activities_stddev_pop_fields
  stddev_samp: token_activities_stddev_samp_fields
  sum: token_activities_sum_fields
  var_pop: token_activities_var_pop_fields
  var_samp: token_activities_var_samp_fields
  variance: token_activities_variance_fields
}

"""aggregate avg on columns"""
type token_activities_avg_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""
Boolean expression to filter rows from the table "token_activities". All fields are combined with a logical 'AND'.
"""
input token_activities_bool_exp {
  _and: [token_activities_bool_exp!]
  _not: token_activities_bool_exp
  _or: [token_activities_bool_exp!]
  coin_amount: numeric_comparison_exp
  coin_type: String_comparison_exp
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  event_account_address: String_comparison_exp
  event_creation_number: bigint_comparison_exp
  event_sequence_number: bigint_comparison_exp
  from_address: String_comparison_exp
  name: String_comparison_exp
  property_version: numeric_comparison_exp
  to_address: String_comparison_exp
  token_amount: numeric_comparison_exp
  token_data_id_hash: String_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
  transfer_type: String_comparison_exp
}

"""aggregate max on columns"""
type token_activities_max_fields {
  coin_amount: numeric
  coin_type: String
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  event_account_address: String
  event_creation_number: bigint
  event_sequence_number: bigint
  from_address: String
  name: String
  property_version: numeric
  to_address: String
  token_amount: numeric
  token_data_id_hash: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  transfer_type: String
}

"""aggregate min on columns"""
type token_activities_min_fields {
  coin_amount: numeric
  coin_type: String
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  event_account_address: String
  event_creation_number: bigint
  event_sequence_number: bigint
  from_address: String
  name: String
  property_version: numeric
  to_address: String
  token_amount: numeric
  token_data_id_hash: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  transfer_type: String
}

"""Ordering options when selecting data from "token_activities"."""
input token_activities_order_by {
  coin_amount: order_by
  coin_type: order_by
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  event_account_address: order_by
  event_creation_number: order_by
  event_sequence_number: order_by
  from_address: order_by
  name: order_by
  property_version: order_by
  to_address: order_by
  token_amount: order_by
  token_data_id_hash: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
  transfer_type: order_by
}

"""
select columns of table "token_activities"
"""
enum token_activities_select_column {
  """column name"""
  coin_amount

  """column name"""
  coin_type

  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  event_account_address

  """column name"""
  event_creation_number

  """column name"""
  event_sequence_number

  """column name"""
  from_address

  """column name"""
  name

  """column name"""
  property_version

  """column name"""
  to_address

  """column name"""
  token_amount

  """column name"""
  token_data_id_hash

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version

  """column name"""
  transfer_type
}

"""aggregate stddev on columns"""
type token_activities_stddev_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""aggregate stddev_pop on columns"""
type token_activities_stddev_pop_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""aggregate stddev_samp on columns"""
type token_activities_stddev_samp_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""
Streaming cursor of the table "token_activities"
"""
input token_activities_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_activities_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_activities_stream_cursor_value_input {
  coin_amount: numeric
  coin_type: String
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  event_account_address: String
  event_creation_number: bigint
  event_sequence_number: bigint
  from_address: String
  name: String
  property_version: numeric
  to_address: String
  token_amount: numeric
  token_data_id_hash: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  transfer_type: String
}

"""aggregate sum on columns"""
type token_activities_sum_fields {
  coin_amount: numeric
  event_creation_number: bigint
  event_sequence_number: bigint
  property_version: numeric
  token_amount: numeric
  transaction_version: bigint
}

"""aggregate var_pop on columns"""
type token_activities_var_pop_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""aggregate var_samp on columns"""
type token_activities_var_samp_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""aggregate variance on columns"""
type token_activities_variance_fields {
  coin_amount: Float
  event_creation_number: Float
  event_sequence_number: Float
  property_version: Float
  token_amount: Float
  transaction_version: Float
}

"""
columns and relationships of "token_datas"
"""
type token_datas {
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!
  default_properties(
    """JSON select path"""
    path: String
  ): jsonb!
  description: String!
  description_mutable: Boolean!
  largest_property_version: numeric!
  maximum: numeric!
  maximum_mutable: Boolean!
  metadata_uri: String!
  name: String!
  payee_address: String!
  properties_mutable: Boolean!
  royalty_mutable: Boolean!
  royalty_points_denominator: numeric!
  royalty_points_numerator: numeric!
  supply: numeric!
  token_data_id_hash: String!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
  uri_mutable: Boolean!
}

"""
Boolean expression to filter rows from the table "token_datas". All fields are combined with a logical 'AND'.
"""
input token_datas_bool_exp {
  _and: [token_datas_bool_exp!]
  _not: token_datas_bool_exp
  _or: [token_datas_bool_exp!]
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  default_properties: jsonb_comparison_exp
  description: String_comparison_exp
  description_mutable: Boolean_comparison_exp
  largest_property_version: numeric_comparison_exp
  maximum: numeric_comparison_exp
  maximum_mutable: Boolean_comparison_exp
  metadata_uri: String_comparison_exp
  name: String_comparison_exp
  payee_address: String_comparison_exp
  properties_mutable: Boolean_comparison_exp
  royalty_mutable: Boolean_comparison_exp
  royalty_points_denominator: numeric_comparison_exp
  royalty_points_numerator: numeric_comparison_exp
  supply: numeric_comparison_exp
  token_data_id_hash: String_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
  uri_mutable: Boolean_comparison_exp
}

"""Ordering options when selecting data from "token_datas"."""
input token_datas_order_by {
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  default_properties: order_by
  description: order_by
  description_mutable: order_by
  largest_property_version: order_by
  maximum: order_by
  maximum_mutable: order_by
  metadata_uri: order_by
  name: order_by
  payee_address: order_by
  properties_mutable: order_by
  royalty_mutable: order_by
  royalty_points_denominator: order_by
  royalty_points_numerator: order_by
  supply: order_by
  token_data_id_hash: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
  uri_mutable: order_by
}

"""
select columns of table "token_datas"
"""
enum token_datas_select_column {
  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  default_properties

  """column name"""
  description

  """column name"""
  description_mutable

  """column name"""
  largest_property_version

  """column name"""
  maximum

  """column name"""
  maximum_mutable

  """column name"""
  metadata_uri

  """column name"""
  name

  """column name"""
  payee_address

  """column name"""
  properties_mutable

  """column name"""
  royalty_mutable

  """column name"""
  royalty_points_denominator

  """column name"""
  royalty_points_numerator

  """column name"""
  supply

  """column name"""
  token_data_id_hash

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version

  """column name"""
  uri_mutable
}

"""
Streaming cursor of the table "token_datas"
"""
input token_datas_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_datas_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_datas_stream_cursor_value_input {
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  default_properties: jsonb
  description: String
  description_mutable: Boolean
  largest_property_version: numeric
  maximum: numeric
  maximum_mutable: Boolean
  metadata_uri: String
  name: String
  payee_address: String
  properties_mutable: Boolean
  royalty_mutable: Boolean
  royalty_points_denominator: numeric
  royalty_points_numerator: numeric
  supply: numeric
  token_data_id_hash: String
  transaction_timestamp: timestamp
  transaction_version: bigint
  uri_mutable: Boolean
}

"""
columns and relationships of "token_ownerships"
"""
type token_ownerships {
  amount: numeric!
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!
  name: String!
  owner_address: String
  property_version: numeric!
  table_handle: String!
  token_data_id_hash: String!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
}

"""
Boolean expression to filter rows from the table "token_ownerships". All fields are combined with a logical 'AND'.
"""
input token_ownerships_bool_exp {
  _and: [token_ownerships_bool_exp!]
  _not: token_ownerships_bool_exp
  _or: [token_ownerships_bool_exp!]
  amount: numeric_comparison_exp
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  name: String_comparison_exp
  owner_address: String_comparison_exp
  property_version: numeric_comparison_exp
  table_handle: String_comparison_exp
  token_data_id_hash: String_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
}

"""Ordering options when selecting data from "token_ownerships"."""
input token_ownerships_order_by {
  amount: order_by
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  name: order_by
  owner_address: order_by
  property_version: order_by
  table_handle: order_by
  token_data_id_hash: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
}

"""
select columns of table "token_ownerships"
"""
enum token_ownerships_select_column {
  """column name"""
  amount

  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  name

  """column name"""
  owner_address

  """column name"""
  property_version

  """column name"""
  table_handle

  """column name"""
  token_data_id_hash

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version
}

"""
Streaming cursor of the table "token_ownerships"
"""
input token_ownerships_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_ownerships_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_ownerships_stream_cursor_value_input {
  amount: numeric
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  name: String
  owner_address: String
  property_version: numeric
  table_handle: String
  token_data_id_hash: String
  transaction_timestamp: timestamp
  transaction_version: bigint
}

"""
columns and relationships of "tokens"
"""
type tokens {
  collection_data_id_hash: String!
  collection_name: String!
  creator_address: String!
  name: String!
  property_version: numeric!
  token_data_id_hash: String!
  token_properties(
    """JSON select path"""
    path: String
  ): jsonb!
  transaction_timestamp: timestamp!
  transaction_version: bigint!
}

"""
Boolean expression to filter rows from the table "tokens". All fields are combined with a logical 'AND'.
"""
input tokens_bool_exp {
  _and: [tokens_bool_exp!]
  _not: tokens_bool_exp
  _or: [tokens_bool_exp!]
  collection_data_id_hash: String_comparison_exp
  collection_name: String_comparison_exp
  creator_address: String_comparison_exp
  name: String_comparison_exp
  property_version: numeric_comparison_exp
  token_data_id_hash: String_comparison_exp
  token_properties: jsonb_comparison_exp
  transaction_timestamp: timestamp_comparison_exp
  transaction_version: bigint_comparison_exp
}

"""Ordering options when selecting data from "tokens"."""
input tokens_order_by {
  collection_data_id_hash: order_by
  collection_name: order_by
  creator_address: order_by
  name: order_by
  property_version: order_by
  token_data_id_hash: order_by
  token_properties: order_by
  transaction_timestamp: order_by
  transaction_version: order_by
}

"""
select columns of table "tokens"
"""
enum tokens_select_column {
  """column name"""
  collection_data_id_hash

  """column name"""
  collection_name

  """column name"""
  creator_address

  """column name"""
  name

  """column name"""
  property_version

  """column name"""
  token_data_id_hash

  """column name"""
  token_properties

  """column name"""
  transaction_timestamp

  """column name"""
  transaction_version
}

"""
Streaming cursor of the table "tokens"
"""
input tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tokens_stream_cursor_value_input {
  collection_data_id_hash: String
  collection_name: String
  creator_address: String
  name: String
  property_version: numeric
  token_data_id_hash: String
  token_properties: jsonb
  transaction_timestamp: timestamp
  transaction_version: bigint
}

"""
columns and relationships of "user_transactions"
"""
type user_transactions {
  version: bigint!
}

"""
Boolean expression to filter rows from the table "user_transactions". All fields are combined with a logical 'AND'.
"""
input user_transactions_bool_exp {
  _and: [user_transactions_bool_exp!]
  _not: user_transactions_bool_exp
  _or: [user_transactions_bool_exp!]
  version: bigint_comparison_exp
}

"""Ordering options when selecting data from "user_transactions"."""
input user_transactions_order_by {
  version: order_by
}

"""
select columns of table "user_transactions"
"""
enum user_transactions_select_column {
  """column name"""
  version
}

"""
Streaming cursor of the table "user_transactions"
"""
input user_transactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_transactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_transactions_stream_cursor_value_input {
  version: bigint
}

